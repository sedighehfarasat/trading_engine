import datetime
try:
    import Queue as queue
except ImportError:
    import queue
from abc import ABCMeta, abstractmethod
from trading_engine.event import FillEvent


class ExecutionHandler(object):
    """
    The ExecutionHandler abstract class handles the interaction between a set of order objects generated by a Portfolio
    and the ultimate set of Fill objects that actually occur in the market.
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def execute_order(self, event):
        """
        Takes an Order event and executes it, producing a Fill event that gets placed onto the Events queue.
        Parameters:
        event - Contains an Event object with order information.
        """

        raise NotImplementedError("Should implement execute_order()")


class SimulatedExecutionHandler(ExecutionHandler):
    """
    The simulated execution handler simply converts all order objects into their equivalent fill objects automatically
    without latency, slippage or fill-ratio issues.
    This allows a straightforward "first go" test of any strategy, before implementation with a more sophisticated
    execution handler.
    """

    def __init__(self, events):
        """
        Parameters:
        events - The Queue of Event objects.
        """

        self.events = events

    def execute_order(self, event):
        """
        Simply converts Order objects into Fill objects, i.e. without any latency, slippage or fill ratio problems.
        Parameters:
        event - Contains an Event object with order information.
        """

        if event.type == 'ORDER':
            fill_event = FillEvent(
                datetime.datetime.utcnow(), event.symbol,
                'ARCA', event.quantity, event.direction, None, 0
            )
            self.events.put(fill_event)
